//Ex. 2.3: Instead of objects bouncing off the edge of the wall, create an example that includes an invisible force pushing back on the objects 
//to keep them in the window. Can you weight the force according to the objectâ€™s distance from an edge so that the closer it is, the 
//stronger the force?

//Ex. 2.4: Fix the bouncing off the sides of the canvas so that the circle changes direction when its edge hits the side, rather than 
//its center.  




let mover;

function setup() {
  createCanvas(800, 600);
  mover = new Mover(48);
}

function draw() {
  background(255);
  let mouse = createVector(mouseX, mouseY);
  let force = p5.Vector.sub(mouse, mover.position);
  force.setMag(0.2);
  
  mover.applyForce(force);
  mover.edgeRepel();
  mover.update();
  mover.display();
}

class Mover {
  constructor(size) {
    this.position = createVector(width / 2, height / 2);
    this.velocity = createVector(0, 0);
    this.acceleration = createVector(0, 0);
    this.mass = 1;
    this.size = size; //adding a size attribute
  }

  applyForce(force) {
    let f = p5.Vector.div(force, this.mass);
    this.acceleration.add(f);
  }

  edgeRepel() {
    let edgeThreshold = this.size; // setting the threshold according to the size of the ball, to solve ex. 2.4
    let repelForce = createVector(0, 0);

    
    if (this.position.x < edgeThreshold) {
      let strength = map(this.position.x, 0, edgeThreshold, 1, 0);
      repelForce.x = (edgeThreshold - this.position.x) * 0.1 * strength;
    } else if (this.position.x > width - edgeThreshold) {
      let strength = map(this.position.x, width - edgeThreshold, width, 0, 1);
      repelForce.x = -(this.position.x - (width - edgeThreshold)) * 0.1 * strength;
    }

    if (this.position.y < edgeThreshold) {
      let strength = map(this.position.y, 0, edgeThreshold, 1, 0);
      repelForce.y = (edgeThreshold - this.position.y) * 0.1 * strength;
    } else if (this.position.y > height - edgeThreshold) {
      let strength = map(this.position.y, height - edgeThreshold, height, 0, 1);
      repelForce.y = -(this.position.y - (height - edgeThreshold)) * 0.1 * strength;
    }

    this.applyForce(repelForce);
  }

  update() {
    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);
    this.acceleration.mult(0);
    this.velocity.limit(5);
  }

  display() {
    stroke(0);
    strokeWeight(2);
    fill(127);
    ellipse(this.position.x, this.position.y, this.size, this.size);
  }
}
