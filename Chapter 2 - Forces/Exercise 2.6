//Exercise 2.6
//Add a second object to Example 2.4. How do you handle having two objects of different masses? What if each object has its own 
//coefficient of friction relative to the bottom surface? Does it make sense to encapsulate the friction force calculation into a Mover 
//method?

//We add a bounce and friction argument to the constructor, so that we can specify them at creation
//This simulation allows for discrete control of the bounce and friction factor, allowing to simulate objects of different
//materials. If we wanted to simulate objects all made from the same material, we could just define bounce and friction
//as functions of mass.

class Mover {
  constructor(x, y, mass, bounce, frictionCoeff) {
    this.position = createVector(x, y);
    this.velocity = createVector(0, 0);
    this.acceleration = createVector(0, 0);
    this.mass = mass;
    this.radius = sqrt(this.mass) * 10;
    this.bounce = bounce;
    this.frictionCoeff = frictionCoeff;
  }

  applyForce(force) {
    let f = p5.Vector.div(force, this.mass);
    this.acceleration.add(f);
  }

  applyFriction() {
    if (this.contactEdge()) {
      let friction = this.velocity.copy();
      friction.mult(-1);
      friction.setMag(this.frictionCoeff);
      this.applyForce(friction);
    }
  }

  update() {
    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);
    this.acceleration.mult(0);
  }

  show() {
    stroke(0);
    strokeWeight(2);
    fill(127);
    ellipse(this.position.x, this.position.y, this.radius * 2);
  }

  contactEdge() {
    return (this.position.y + this.radius >= height);
  }

  bounceEdges() {
    if (this.position.y > height - this.radius) {
      this.position.y = height - this.radius;
      this.velocity.y *= this.bounce;
    }

    if (this.position.x + this.radius > width) {
      this.position.x = width - this.radius;
      this.velocity.x *= -1;
    } else if (this.position.x - this.radius < 0) {
      this.position.x = this.radius;
      this.velocity.x *= -1;
    }
  }
}


let movers = [];

function setup() {
  createCanvas(600, 400);
  movers.push(new Mover(width / 2, 50, 5, -0.9, 0.1));
  movers.push(new Mover(width / 3, 100, 10, -0.7, 0.05));
}

function draw() {
  background(255);

  for (let mover of movers) {
    let gravity = createVector(0, 1);
    gravity.mult(mover.mass);
    mover.applyForce(gravity);

    if (mouseIsPressed) {
      let wind = createVector(0.5, 0);
      mover.applyForce(wind);
    }

    mover.applyFriction();
    mover.bounceEdges();
    mover.update();
    mover.show();
  }
}
