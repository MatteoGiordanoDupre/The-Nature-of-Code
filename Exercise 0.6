//Exercise 0.6
//Use a custom probability distribution to vary the size of the random walker’s steps. The step size can //be determined by influencing the range of values picked with a qualifying random value. Can you map //the probability to a quadratic function by making the likelihood that a value is picked equal to the //value squared?

let walker;

function setup() {
  createCanvas(640, 240);
  walker = new Walker();
  background(255);
}

function draw() {
  walker.step();
  walker.show();
}

class Walker {
  constructor() {
    this.x = width / 2;
    this.y = height / 2;
  }

  show() {
    stroke(0);
    point(this.x, this.y);
  }

  step() {
    let step = 5;
    let xstep = acceptreject() * step;
    if (random([false, true])) {
      xstep *= -1;
    }
    let ystep = acceptreject() * step;
    if (random([false, true])) {
      ystep *= -1;
    }
    this.x += xstep;
    this.y += ystep;
  }
}

// seems like the most efficient way is monte carlo method, this could also be done with filling an array, but it would be computationally efficient as the number of elements would increase very rapidly 

function acceptreject() {
  // We do this “forever” until we find a qualifying random value.
  while (true) {
    // Pick a random value.
    let r1 = random(1);
    // Assign a probability.
    let probability = r1 * r1;
    // Pick a second random value.
    let r2 = random(1);

    
    if (r2 < probability) {
      return r1;
    }
  }
}
